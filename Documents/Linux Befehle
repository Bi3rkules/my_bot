
!!! Linux Befehle !!!


Roboter:

	Befehle die vor Start der Robotersimulation ausgefuehrt werden muessen (source and build workspac):
		robotic@robotic:~/dev_ws$ colcon build --symlink-install
		// Muss nur beim ersten Mal gemacht werden und immer wenn eine neue datei im Workspace hinzugefuegt wurde
		robotic@robotic:~/dev_ws$ c
		// Source Workspace
		// (robotic@robotic:~/dev_ws$ source /opt/ros/foxy/setup.bash)
			
	Publish Roboter:
		robotic@robotic:~/dev_ws$ ros2 launch my_bot rsp.launch.py
		// Roboter kann in Rviz dargestellt werden
		// Zeiten werden nicht synchonisiert (kann nicht in Gazebo dargestellt werden) 
	
	Publish Roboter mit use_sim_time:
		robotic@robotic:~/dev_ws$ ros2 launch my_bot rsp.launch.py use_sim_time:=true
		// Roboter kann in Rviz und Gazebo dargestellt werden
		// Zeiten werden synchonisiert  
	
	Gazebo oeffnen:
		robotic@robotic:~/dev_ws$ ros2 launch gazebo_ros gazebo.launch.py

		 
	Roboter wird in Gazebo gespornt:
		robotic@robotic:~/dev_ws$ ros2 run gazebo_ros spawn_entity.py -topic robot_description -entity bot_name
		//  
		
	Launchfile fuehrt alles durch:
		robotic@robotic:~/dev_ws$ ros2 launch my_bot launch_sim.launch.py
		// Roboter wird gepublished, Gazebo wird Geoeffnet, Roboter wird gespornt

	Rviz oeffnen:
		robotic@robotic:~/dev_ws$ rviz2
		// - in Rviz muss unter "Global Options - Fixed Frame" gesetzt werden:
		//   -> "base_link" das Heck des Roboters wird in der Mitte fixiert und er bewegt sich nicht
		//   -> "odom" das Weltkoordinatensystem wird in der Mitte fixiert und der Roboter wird wie in Gazebo dargestellt
		// - mit "Add - TF" werden Koordinatensysteme dargestellt
		// - mit "Add - GobotModel" wird ein Robotter Model hinzugefuegt
		//   -> unter "RobotModel" muss "Description Topic" auf "/robot_description" gesetzt werden um den Roboter anzuzeigen
		// - Wird der Roboter nicht in einem anderen Programm (Gazebo) dargestellt entsteht ein Fehler,
		//   da Rviz nicht weiss ich welcher Position sich die Gelenke gerade nefinden.
		//   Hieryu kann der folgende Code verwendet werden um einen einfachen Winkel voryugeben
		robotic@robotic:~/dev_ws$ ros2 run joint_state_publisher_gui joint_state_publisher_gui
		
	Rviz oeffnen mit gespeicherten Einstellungen:
		robotic@robotic:~/dev_ws$ rviz2 -d src/my_bot/config/view_bot_base_link.rviz 
		// base_link (Heck des Roboters) ist in der Mitte fixiert (Roboter bewegt sich nicht)
		robotic@robotic:~/dev_ws$ rviz2 -d src/my_bot/config/view_bot_odom.rviz
		// odom (Weltkoordinatensystem ist in der Mitte fixiert (Roboter kann durch simulation in Gazebo bewegt werden)
		
	Tastartursteuerung:
		robotic@robotic:~/dev_ws$ ros2 run teleop_twist_keyboard teleop_twist_keyboard
	
	Auslesen der aktuellen Comands (Bedienung):
		robotic@robotic:~/dev_ws$ ros2 topic echo /cmd_vel
	
	Joystick:
		// robotic@robotic:~/dev_ws$ ros2 launch my_bot joystick.launch.py

	
Zugriffe:

	Externer Zugriff:
		robotic@robotic:~$ ssh ubuntu@XXXIP-AdresseXXX
		
	IP-Adresse abrufen:
		robotic@robotic:~$ ifconfig	
	
		
Installation:   

	Git:
		robotic@robotic:~/dev_ws$ git config --global user.email "lars-tensing@gmx.de"
		robotic@robotic:~/dev_ws$ git config --global user.name "Bi3rkules"
	
	Gazebo:
		robotic@robotic:~/dev_ws$ sudo apt install ros-foxy-gazebo-ros-pkgs

	Rviz:
		robotic@robotic:~/dev_ws$ sudo apt install ros-foxy-xacro ros-foxy-joint-state-publisher-gui

